import { ArrowLeft } from 'lucide-react'
import type { TripFormData } from './TripPlanningForm'

interface TripReviewScreenProps {
  formData: TripFormData
  onEdit: () => void
  onGenerate: () => void
  isGenerating?: boolean
}

const tripTypeLabels = {
  adventure: '🏔️ Adventure',
  relaxation: '🏖️ Relaxation', 
  cultural: '🏛️ Cultural',
  business: '💼 Business',
  family: '👨‍👩‍👧‍👦 Family',
  romantic: '💕 Romantic',
  foodie: '🍽️ Foodie',
  wellness: '🧘‍♀️ Wellness',
}

const travelPaceLabels = {
  relaxed: 'Relaxed Pace',
  moderate: 'Moderate Pace', 
  packed: 'Action-Packed',
}

const interestLabels = {
  food: '🍽️ Food & Dining',
  museums: '🏛️ Museums & Culture',
  outdoor: '🥾 Outdoor Activities',
  shopping: '🛍️ Shopping',
  nightlife: '🌃 Nightlife',
  history: '📚 History',
  art: '🎨 Art & Galleries',
  nature: '🌳 Nature & Parks',
  architecture: '🏗️ Architecture',
  music: '🎵 Music & Events',
  sports: '⚽ Sports & Fitness',
  beaches: '🏖️ Beaches & Water',
}

export function TripReviewScreen({ formData, onEdit, onGenerate, isGenerating }: TripReviewScreenProps) {
  
  // Calculate trip duration (inclusive of both start and end dates)
  const duration = formData.startDate && formData.endDate 
    ? Math.ceil((new Date(formData.endDate).getTime() - new Date(formData.startDate).getTime()) / (1000 * 60 * 60 * 24)) + 1
    : 0

  // Format dates for display
  const formatDate = (dateStr: string) => {
    if (!dateStr) return ''
    return new Date(dateStr).toLocaleDateString('en-US', { 
      weekday: 'long',
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })
  }


  return (
    <div className="max-w-2xl mx-auto">
      {/* Header - Simplified */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Review your trip</h1>
        <p className="text-gray-600">Everything looks good? Let's create your itinerary!</p>
      </div>

      {/* Back Button - Simplified */}
      <button
        onClick={onEdit}
        className="inline-flex items-center gap-1 text-gray-600 hover:text-gray-900 mb-6 transition-colors"
      >
        <ArrowLeft className="w-4 h-4" />
        <span className="text-sm">Edit details</span>
      </button>

      <div className="space-y-4">
        {/* Trip Overview Card - Simplified */}
        <div className="bg-white rounded-lg p-6 border border-gray-200">
          <h3 className="text-xl font-bold text-gray-900 mb-4">{formData.autoGeneratedTitle}</h3>
          
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <div className="text-gray-500 mb-1">Destination</div>
              <div className="font-medium">{formData.destination}</div>
            </div>
            <div>
              <div className="text-gray-500 mb-1">Duration</div>
              <div className="font-medium">{duration} day{duration !== 1 ? 's' : ''}</div>
            </div>
            <div>
              <div className="text-gray-500 mb-1">Start date</div>
              <div className="font-medium">{formatDate(formData.startDate)}</div>
            </div>
            <div>
              <div className="text-gray-500 mb-1">End date</div>
              <div className="font-medium">{formatDate(formData.endDate)}</div>
            </div>
          </div>
        </div>

        {/* Customizations - Compact */}
        {(formData.tripType || formData.travelPace || formData.interests.length > 0 || formData.customItems.length > 0) && (
          <div className="bg-white rounded-lg p-6 border border-gray-200">
            <h4 className="font-medium text-gray-900 mb-4">Your preferences</h4>
            
            <div className="space-y-3 text-sm">
              {formData.tripType && (
                <div className="flex justify-between">
                  <span className="text-gray-500">Trip type:</span>
                  <span className="font-medium">{tripTypeLabels[formData.tripType as keyof typeof tripTypeLabels] || formData.tripType}</span>
                </div>
              )}
              
              {formData.travelPace && (
                <div className="flex justify-between">
                  <span className="text-gray-500">Travel pace:</span>
                  <span className="font-medium">{travelPaceLabels[formData.travelPace as keyof typeof travelPaceLabels] || formData.travelPace}</span>
                </div>
              )}
              
              
              {formData.interests.length > 0 && (
                <div>
                  <div className="text-gray-500 mb-2">Interests:</div>
                  <div className="flex flex-wrap gap-1">
                    {formData.interests.map((interest) => (
                      <span
                        key={interest}
                        className="inline-block px-2 py-1 bg-blue-50 text-blue-700 rounded text-xs"
                      >
                        {interestLabels[interest as keyof typeof interestLabels] || interest}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              
              {formData.customItems.length > 0 && (
                <div>
                  <div className="text-gray-500 mb-2">Must-visit places ({formData.customItems.length}):</div>
                  <div className="flex flex-wrap gap-1">
                    {formData.customItems.slice(0, 3).map((item, index) => (
                      <span
                        key={index}
                        className="inline-block px-2 py-1 bg-green-50 text-green-700 rounded text-xs"
                      >
                        {item}
                      </span>
                    ))}
                    {formData.customItems.length > 3 && (
                      <span className="inline-block px-2 py-1 bg-gray-50 text-gray-600 rounded text-xs">
                        +{formData.customItems.length - 3} more
                      </span>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Generation CTA - Simplified */}
        <div className="text-center pt-4">
          <button
            onClick={onGenerate}
            disabled={isGenerating}
            className="bg-green-600 text-white px-8 py-3 rounded-lg font-medium hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isGenerating ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin inline-block mr-2"></div>
                Creating your trip...
              </>
            ) : (
              'Generate my trip'
            )}
          </button>
          
          <div className="mt-3">
            <button
              onClick={onEdit}
              className="text-gray-600 hover:text-gray-900 text-sm underline transition-colors"
            >
              Edit details
            </button>
          </div>

          {formData.customItems.length > 0 && (
            <p className="text-xs text-gray-500 mt-4 max-w-md mx-auto">
              We'll make sure to include all {formData.customItems.length} of your must-visit places in the itinerary.
            </p>
          )}
        </div>
      </div>
    </div>
  )
}