import { useState, useEffect } from 'react'
import { Plus, X, ChevronDown, ChevronUp } from 'lucide-react'
import { DestinationAutocomplete } from './DestinationAutocomplete'
import { DateRangePicker } from './DateRangePicker'

export interface TripFormData {
  destination: string
  destinationCoords: { lat: number; lng: number } | null
  startDate: string
  endDate: string
  tripType: string
  travelPace: string
  interests: string[]
  customItems: string[]
  autoGeneratedTitle: string
}

interface TripPlanningFormProps {
  onSubmit: (data: TripFormData) => void
  onDataChange?: (data: TripFormData) => void
  initialData?: Partial<TripFormData>
  isGenerating?: boolean
}

const tripTypeOptions = [
  { value: 'adventure', label: '🏔️ Adventure', description: 'Outdoor activities and exploration' },
  { value: 'relaxation', label: '🏖️ Relaxation', description: 'Rest and rejuvenation focused' },
  { value: 'cultural', label: '🏛️ Cultural', description: 'Museums, history, and local culture' },
  { value: 'business', label: '💼 Business', description: 'Work travel with some leisure' },
  { value: 'family', label: '👨‍👩‍👧‍👦 Family', description: 'Fun for all ages' },
  { value: 'romantic', label: '💕 Romantic', description: 'Couples getaway' },
  { value: 'foodie', label: '🍽️ Foodie', description: 'Culinary experiences' },
  { value: 'wellness', label: '🧘‍♀️ Wellness', description: 'Health and mindfulness' },
]

const travelPaceOptions = [
  { value: 'relaxed', label: 'Relaxed', description: '2-3 activities per day, plenty of rest time', icon: '🐌' },
  { value: 'moderate', label: 'Moderate', description: '3-4 activities per day, balanced schedule', icon: '🚶‍♀️' },
  { value: 'packed', label: 'Packed', description: '5+ activities per day, maximize experiences', icon: '🏃‍♂️' },
]

const interestOptions = [
  { value: 'food', label: 'Food & Dining', icon: '🍽️' },
  { value: 'museums', label: 'Museums & Culture', icon: '🏛️' },
  { value: 'outdoor', label: 'Outdoor Activities', icon: '🥾' },
  { value: 'shopping', label: 'Shopping', icon: '🛍️' },
  { value: 'nightlife', label: 'Nightlife', icon: '🌃' },
  { value: 'history', label: 'History', icon: '📚' },
  { value: 'art', label: 'Art & Galleries', icon: '🎨' },
  { value: 'nature', label: 'Nature & Parks', icon: '🌳' },
  { value: 'architecture', label: 'Architecture', icon: '🏗️' },
  { value: 'music', label: 'Music & Events', icon: '🎵' },
  { value: 'sports', label: 'Sports & Fitness', icon: '⚽' },
  { value: 'beaches', label: 'Beaches & Water', icon: '🏖️' },
]

// Utility function to generate trip titles
const generateTripTitle = (destination: string, startDate: string, endDate: string, tripType: string): string => {
  if (!destination) return ''
  
  // Get trip type label
  const typeOption = tripTypeOptions.find(opt => opt.value === tripType)
  const typeLabel = typeOption ? typeOption.label.replace(/[^\w\s]/g, '').trim() : ''
  
  // Generate title without dates
  if (typeLabel) {
    return `${destination} ${typeLabel}`
  } else {
    return `${destination} Adventure`
  }
}

export function TripPlanningForm({ onSubmit, onDataChange, initialData, isGenerating }: TripPlanningFormProps) {
  const [formData, setFormData] = useState<TripFormData>({
    destination: '',
    destinationCoords: null,
    startDate: '',
    endDate: '',
    tripType: '',
    travelPace: '',
    interests: [],
    customItems: [],
    autoGeneratedTitle: '',
    ...initialData,
  })

  const [errors, setErrors] = useState<Record<string, string>>({})
  const [newCustomItem, setNewCustomItem] = useState('')
  const [showOptional, setShowOptional] = useState(false)

  // Auto-generate title when key fields change
  useEffect(() => {
    const title = generateTripTitle(formData.destination, formData.startDate, formData.endDate, formData.tripType)
    if (title !== formData.autoGeneratedTitle) {
      const updatedData = { ...formData, autoGeneratedTitle: title }
      setFormData(updatedData)
      onDataChange?.(updatedData)
    }
  }, [formData.destination, formData.startDate, formData.endDate, formData.tripType])

  // Notify parent of data changes
  useEffect(() => {
    onDataChange?.(formData)
  }, [formData, onDataChange])

  const updateFormData = (updates: Partial<TripFormData>) => {
    setFormData(prevData => {
      const newData = { ...prevData, ...updates }
      onDataChange?.(newData)
      return newData
    })
  }

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {}

    if (!formData.destination.trim()) {
      newErrors.destination = 'Destination is required'
    }

    if (!formData.startDate) {
      newErrors.startDate = 'Start date is required'
    }

    if (!formData.endDate) {
      newErrors.endDate = 'End date is required'
    }

    if (formData.startDate && formData.endDate && new Date(formData.endDate) <= new Date(formData.startDate)) {
      newErrors.endDate = 'End date must be after start date'
    }

    if (!formData.travelPace) {
      newErrors.travelPace = 'Please select your travel pace'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (validateForm()) {
      onSubmit(formData)
    }
  }

  const addCustomItem = () => {
    if (newCustomItem.trim()) {
      updateFormData({
        customItems: [...formData.customItems, newCustomItem.trim()]
      })
      setNewCustomItem('')
    }
  }

  const removeCustomItem = (index: number) => {
    updateFormData({
      customItems: formData.customItems.filter((_, i) => i !== index)
    })
  }

  const toggleInterest = (interest: string) => {
    const newInterests = formData.interests.includes(interest)
      ? formData.interests.filter(i => i !== interest)
      : [...formData.interests, interest]
    
    updateFormData({ interests: newInterests })
  }

  // Calculate trip duration (inclusive of both start and end dates)
  const duration = formData.startDate && formData.endDate 
    ? Math.ceil((new Date(formData.endDate).getTime() - new Date(formData.startDate).getTime()) / (1000 * 60 * 60 * 24)) + 1
    : 0

  return (
    <form onSubmit={handleSubmit} className="max-w-2xl mx-auto space-y-8">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Plan your perfect trip</h1>
        <p className="text-gray-600">Just tell us the basics and we'll handle the rest</p>
      </div>

      {/* Main Form Card */}
      <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
        
        {/* Essential Fields */}
        <div className="space-y-6 mb-8">
          {/* Destination */}
          <div>
            <label className="block text-sm font-medium text-gray-900 mb-2">
              Where are you going? *
            </label>
            <DestinationAutocomplete
              value={formData.destination}
              onChange={(destination, coords) => updateFormData({ destination, destinationCoords: coords })}
              placeholder="e.g., Paris, Tokyo, New York..."
              error={errors.destination}
            />
          </div>

          {/* Date Range - Clean Single Selection */}
          <div>
            <DateRangePicker
              label="Travel dates *"
              startDate={formData.startDate}
              endDate={formData.endDate}
              onStartDateChange={(date) => updateFormData({ startDate: date })}
              onEndDateChange={(date) => updateFormData({ endDate: date })}
              placeholder="Select travel dates"
              minDate={new Date()}
              error={errors.startDate || errors.endDate}
            />
          </div>

          {/* Travel Pace - Now Required */}
          <div>
            <label className="block text-sm font-medium text-gray-900 mb-2">
              Travel pace *
            </label>
            <div className="grid grid-cols-3 gap-3">
              {travelPaceOptions.map((option) => (
                <button
                  key={option.value}
                  type="button"
                  onClick={() => updateFormData({ travelPace: option.value })}
                  className={`p-3 rounded-lg border text-center transition-all ${
                    formData.travelPace === option.value
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="text-lg mb-1">{option.icon}</div>
                  <div className="text-sm font-medium">{option.label}</div>
                </button>
              ))}
            </div>
            {errors.travelPace && (
              <p className="mt-1 text-sm text-red-600">{errors.travelPace}</p>
            )}
          </div>

          {duration > 0 && (
            <div className="text-center">
              <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-50 text-blue-700">
                {duration} day{duration !== 1 ? 's' : ''} trip
              </span>
            </div>
          )}
        </div>

        {/* Optional Section - Collapsible */}
        <div className="mt-8">
          <button
            type="button"
            onClick={() => setShowOptional(!showOptional)}
            className="w-full flex items-center justify-between px-4 py-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <span className="text-sm font-medium text-gray-700">Additional preferences (optional)</span>
            {showOptional ? (
              <ChevronUp className="h-5 w-5 text-gray-500" />
            ) : (
              <ChevronDown className="h-5 w-5 text-gray-500" />
            )}
          </button>

          {showOptional && (
            <div className="mt-6 space-y-6">
              {/* Trip Type */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Trip type</label>
                <div className="grid grid-cols-2 gap-3">
                  {tripTypeOptions.slice(0, 6).map((option) => (
                    <button
                      key={option.value}
                      type="button"
                      onClick={() => updateFormData({ tripType: option.value })}
                      className={`p-3 rounded-lg border text-left transition-all ${
                        formData.tripType === option.value
                          ? 'border-blue-500 bg-blue-50 text-blue-700'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-sm font-medium">{option.label}</div>
                    </button>
                  ))}
                </div>
              </div>

              {/* Interests */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Interests</label>
                <div className="flex flex-wrap gap-2">
                  {interestOptions.map((option) => (
                    <button
                      key={option.value}
                      type="button"
                      onClick={() => toggleInterest(option.value)}
                      className={`inline-flex items-center gap-1 px-3 py-1.5 rounded-full text-sm border transition-all ${
                        formData.interests.includes(option.value)
                          ? 'border-blue-500 bg-blue-50 text-blue-700'
                          : 'border-gray-200 hover:border-gray-300 text-gray-700'
                      }`}
                    >
                      <span>{option.icon}</span>
                      <span>{option.label}</span>
                    </button>
                  ))}
                </div>
              </div>

              {/* Custom Items */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Must-visit places</label>
                <div className="flex gap-2 mb-3">
                  <input
                    type="text"
                    value={newCustomItem}
                    onChange={(e) => setNewCustomItem(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addCustomItem())}
                    placeholder="Add specific places you want to visit..."
                    className="flex-1 px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
              <button
                type="button"
                onClick={addCustomItem}
                className="px-3 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors"
              >
                <Plus className="w-4 h-4" />
              </button>
            </div>

            {formData.customItems.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {formData.customItems.map((item, index) => (
                  <span
                    key={index}
                    className="inline-flex items-center gap-1 px-2 py-1 bg-green-50 text-green-700 rounded-full text-sm"
                  >
                    {item}
                    <button
                      type="button"
                      onClick={() => removeCustomItem(index)}
                      className="text-green-500 hover:text-green-700"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </span>
                ))}
              </div>
            )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Auto-generated Title Preview - Simplified */}
      {formData.autoGeneratedTitle && (
        <div className="text-center">
          <div className="inline-flex items-center gap-2 px-4 py-2 bg-gray-50 rounded-lg">
            <span className="text-sm text-gray-600">Trip name:</span>
            <span className="font-medium text-gray-900">{formData.autoGeneratedTitle}</span>
          </div>
        </div>
      )}

      {/* Submit Button - Simplified */}
      <div className="text-center">
        <button
          type="submit"
          disabled={isGenerating}
          className="bg-primary-500 text-white px-8 py-3 rounded-lg font-medium hover:bg-primary-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
        >
          {isGenerating ? 'Generating your trip...' : 'Generate trip'}
        </button>
      </div>
    </form>
  )
}